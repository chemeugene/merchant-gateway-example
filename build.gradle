configurations {
    jaxws
}

buildscript {
	ext {
		artifactId = 'merchant-gateway'
        artifactGroup = 'ru.all-recipes'
        artifactVersion = '0.1.0-SNAPSHOT'
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE"
		classpath "io.franzbecker:gradle-lombok:1.8"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

repositories {
	mavenCentral()
	mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wsimport {
    ext.destDir = file("${buildDir}/generated-sources/jaxb")
    ext.classesDir = sourceSets.main.output.classesDir
    doLast {
        ant {
            sourceSets.main.output.classesDir.mkdirs()
            destDir.mkdirs()
            taskdef(name: 'wsimport',
                    classname: 'com.sun.tools.ws.ant.WsImport',
                    classpath: configurations.jaxws.asPath
            )
            wsimport(keep: true,
                    destdir: classesDir,
                    sourcedestdir: destDir,
                    extension: "true",
                    verbose: "false",
                    quiet: "false",
                    xnocompile: "true",
                    wsdl: 'https://web.rbsuat.com/ab/webservices/merchant-ws?wsdl') {
                xjcarg(value: "-XautoNameResolution")
            }
        }
    }
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter"
	compile "org.springframework:spring-jdbc"
	compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile "org.springframework.boot:spring-boot-starter-log4j2"
	compile "org.springframework.ws:spring-ws-core"
	compile "org.postgresql:postgresql:42.1.4"
	compile "io.springfox:springfox-swagger2:2.6.1"
    compile "io.springfox:springfox-swagger-ui:2.6.1"
    compile(files(wsimport.classesDir).builtBy(wsimport))
    compile('org.apache.tomcat.embed:tomcat-embed-jasper' ,'javax.servlet:jstl')
    
    //jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    jaxws "com.sun.xml.ws:jaxws-tools:2.1.4"
	
	testCompile "org.springframework.boot:spring-boot-starter-test"
}

compileJava {
    dependsOn wsimport
    source wsimport.destDir
}

bootJar {
    baseName = "${artifactId}"
    version =  "${artifactVersion}"
    
    from wsimport.destDir
}

configurations {
	compile.exclude module: 'spring-boot-starter-logging'
}

def webappDir = "$projectDir/src/main/webapp"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildAngular"
}

task buildAngular(type:Exec) {
	// installAngular should be run prior to this task
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}
 
task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}

task afterEclipseImport {
    dependsOn wsimport
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

checkstyle {
	configFile = rootProject.file('checkstyle/google_checks.xml')
    ignoreFailures = false
    toolVersion = '8.8'
}

pmd {
    ignoreFailures = false
    rulePriority = 2
    toolVersion = '5.5.3'
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

findbugs {
    ignoreFailures = false
    sourceSets = [sourceSets.main]
}